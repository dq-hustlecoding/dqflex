{"version":3,"sources":["API/constants.js","API/requests.js","API/axios.js","components/Banner.js","components/Nav.js","components/MovieModal/index.js","components/Row.js","components/App.js","serviceWorker.js","index.js"],"names":["baseUrl","requests","fetchDQsPick","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","instance","axios","create","baseURL","Banner","str","n","useState","movie","setMovie","useEffect","a","get","headers","request","data","result","Math","floor","random","length","fetchData","className","style","backgroundImage","poster_path","backgroundPosition","backgroundSize","title","name","original_name","overview","substr","Nav","show","handleShow","window","addEventListener","scrollY","removeEventListener","alt","src","MovieModal","movieId","genres","url","rating_avg","rating_count","setModalVisibility","addRating","role","onClick","replaceAll","toFixed","open","count","onChange","rating","rating_with_id","console","log","size","color2","id","fetchUrl","Row","movies","setMovies","modalVisibility","movieSelected","setMovieSelection","document","getElementById","scrollLeft","innerWidth","map","idx","handleClick","loading","App","personalizeUrl","setPersonalizeUrl","myRating","setMyRating","push","user_based_param","join","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.b9ab35fe.chunk.js","sourcesContent":["export const baseUrl = \"https://dqflex-api.herokuapp.com\";\n","// const API_KEY = \"896c8566fc255f7c52f6ea6bd2901188\";\n\nconst requests = {\n    fetchDQsPick: `/all`,\n    fetchActionMovies: `/genres/action`,\n    fetchComedyMovies: `/genres/comedy`,\n    fetchHorrorMovies: `/genres/horror`,\n    fetchRomanceMovies: `/genres/romance`,\n}\n\nexport default requests;","import axios from \"axios\";\nimport { baseUrl } from \"./constants\";\n\n//THIS IS THE BASE OF THE URL\nconst instance = axios.create({\n  // baseURL : \"https://api.themoviedb.org/3\"\n  baseURL: baseUrl,\n});\n\nexport default instance;\n","import React,{useState,useEffect} from 'react';\nimport PlayArrowIcon from '@material-ui/icons/PlayArrow';\nimport InfoOutlinedIcon from '@material-ui/icons/InfoOutlined';\nimport axios from \"../API/axios\";\nimport requests from \"../API/requests\";\nimport \"./Banner.css\";\n\nconst Banner= ()=> {\n    const [movie,setMovie] = useState([]);\n\n    const truncate = (str, n)=> {\n        return str?.length > n ? str.substr(0, n - 1) + \"...\" : str;\n    }\n\n    useEffect(() => {\n        async function fetchData(){\n            const request = await axios.get(requests.fetchDQsPick, {\n                headers: {\n                  'Access-Control-Allow-Origin': '*',\n                }\n            });\n            //Give to our movie hook one of all the movies randomly\n            setMovie(request.data.result[\n                Math.floor(Math.random() * request.data.result.length -1)\n            ]);\n            return request;\n        }\n        fetchData();\n        \n    },[]);\n    \n    return (\n        <header className=\"banner\"\n            style={{\n                backgroundImage : `url(\n                    \"https://image.tmdb.org/t/p/original/${movie?.poster_path}\"\n                    )`,\n                backgroundPosition : \"top center\",\n                backgroundSize: \"cover\",\n            }}\n        >\n            <div className=\"banner__contents\">\n                {/**Tittle */}\n                <h1 className=\"banner__title\">{movie?.title || movie?.name || movie?.original_name}</h1>\n                <div className=\"banner__buttons\">\n                    <button className=\"banner__button play\"><PlayArrowIcon />Play</button>\n                    {/* <button className=\"banner__button info\"><InfoOutlinedIcon fontSize=\"small\"  paddingRight={20} marginRight={100}/><div className=\"space\"></div> More Information</button> */}\n                    \n                </div>\n                {/**DIV > 2 BUTTONS */}\n\n                <h1 className=\"banner__description\">{truncate(movie?.overview, 150)}</h1>\n                {/*Description*/}\n            </div>   \n            <div className=\"banner--fadeBottom\"/>\n        </header>\n    )\n}\n\nexport default Banner\n","import React,{useState,useEffect} from 'react';\nimport \"./Nav.css\";\n\nconst Nav= ()=> {\n    const [show, handleShow] = useState(false);\n\n    useEffect(()=>{\n        window.addEventListener(\"scroll\", () =>{\n            if(window.scrollY > 50){\n                handleShow(true);\n            }else{\n                handleShow(false);\n            }\n            \n        });\n        return () => {\n            window.removeEventListener(\"scroll\",()=>{})\n        }\n    }, [])\n    \n    return (\n        <nav className={`nav ${show && \"nav__black\"}`}>\n            <img\n                alt=\"DQflex logo\"\n                src=\"https://i.ibb.co/svtr2tD/dqflex-logo.png\"\n                className=\"nav__logo\"\n            />\n            <img\n                alt=\"User logged\"\n                src=\"https://pbs.twimg.com/profile_images/1240119990411550720/hBEe3tdn_400x400.png\"\n                className=\"nav__avatar\"\n            />\n        </nav>\n    )\n}\n\nexport default Nav\n","import CancelIcon from \"@material-ui/icons/Cancel\";\nimport PlayArrowIcon from \"@material-ui/icons/PlayArrow\";\nimport React from \"react\";\nimport ReactStars from \"react-stars\";\nimport { baseUrl } from \"../../API/constants\";\nimport Row from \"../Row\";\nimport \"./MovieModal.css\";\n\nconst MovieModal = ({\n  poster_path,\n  movieId,\n  title,\n  genres,\n  url,\n  rating_avg,\n  rating_count,\n  setModalVisibility,\n  addRating,\n}) => {\n  const onRating = (rating) => {\n    const rating_with_id = `${movieId}:${rating}`;\n    console.log(rating_with_id);\n    addRating(rating_with_id);\n    setModalVisibility(false);\n  };\n\n  return (\n    <div className=\"presentation\" role=\"presentation\">\n      <div className=\"wrapper-modal\">\n        <div className=\"modal\">\n          <span\n            onClick={() => setModalVisibility(false)}\n            className=\"modal-close\"\n          >\n            <CancelIcon />\n          </span>\n          <div className=\"modal__header\">\n            <img\n              className=\"modal__poster-img\"\n              src={`${poster_path}`}\n              alt={`${title}`}\n            />\n            <div className=\"modal__content\">\n              <p className=\"modal__details\">\n                <span className=\"modal__user-perc\">Genre: </span>{\" \"}\n                {genres.replaceAll(\"|\", \" | \")}\n              </p>\n              <h3 className=\"modal__title\">{title}</h3>\n              <p className=\"modal__overview\">\n                Vote Average: {rating_avg.toFixed(2)}\n              </p>\n              <p className=\"modal__overview\">Vote Count: {rating_count}</p>\n              <div className=\"modal__header\">\n                <button\n                  className=\"banner__button play\"\n                  onClick={() => {\n                    window.open(url);\n                  }}\n                >\n                  <PlayArrowIcon />\n                  Detail\n                </button>\n                <ReactStars\n                  count={5}\n                  onChange={onRating}\n                  size={24}\n                  color2={\"#ffd700\"}\n                />\n              </div>\n            </div>\n          </div>\n          <Row\n            title=\"You may also like...\"\n            id={movieId}\n            fetchUrl={`${baseUrl}/item-based/${movieId}`}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default MovieModal;\n","import React, {useState,useEffect} from 'react'\nimport axios from \"../API/axios\";\nimport \"./Row.css\";\nimport MovieModal from './MovieModal';\nimport ArrowForwardIosIcon from '@material-ui/icons/ArrowForwardIos';\nimport ArrowBackIosIcon from '@material-ui/icons/ArrowBackIos';\n\nconst Row= ({title,fetchUrl,id, addRating})=> {\n    const base_url = \"https://image.tmdb.org/t/p/original/\";\n    const [movies, setMovies] = useState([])\n    const [modalVisibility,setModalVisibility] = useState(false);\n    const [movieSelected, setMovieSelection] = useState({});\n\n    //A snippet of code which runs based on a specific condition/variable\n    useEffect(()=>{\n        console.log(id, fetchUrl)\n        //if [], run once when the row loads, and dont run again \n\n        async function fetchData(){\n            //Dont move until we get the API answer\n            const request = await axios.get(fetchUrl, {\n                headers: {\n                  'Access-Control-Allow-Origin': '*',\n                }\n            });\n            // GET REQUEST  = \"https://api.themoviedb.org/3/fetchUrl\"\n            setMovies(request.data.result)\n            return request;\n        }\n\n        fetchData();\n\n    }, [fetchUrl]);\n\n    const handleClick = (movie) =>{\n        setModalVisibility(true);\n        setMovieSelection(movie);\n    }\n    return (\n        <section className=\"row\">\n            {/** TITLE */}\n            <h2>{title}</h2>\n            <div className=\"slider\">\n     \n                <div className=\"slider__arrow-left\" ><span className=\"arrow\" onClick={()=>{document.getElementById(id).scrollLeft-=(window.innerWidth-80)}}><ArrowBackIosIcon/></span></div>\n                <div id={id} className=\"row__posters\">\n                    {/**SEVERAL ROW__POSTER */}\n                    {movies.map((movie, idx)=>(\n                        <img\n                            key={idx}\n                            onClick={() => handleClick(movie)}\n                            className={`row__poster row__posterLarge`} \n                            src={`${base_url}${movie.poster_path}`} \n                            loading=\"lazy\"\n                            alt={movie.title}/>\n                    ))}\n                    \n                </div>\n                <div className=\"slider__arrow-right\" ><span className=\"arrow\" onClick={()=>{document.getElementById(id).scrollLeft+=(window.innerWidth-80)}}><ArrowForwardIosIcon/></span></div>\n            </div>\n            {modalVisibility && <MovieModal {...movieSelected} setModalVisibility={setModalVisibility} addRating={addRating} />}\n        </section>\n    )\n}\n\nexport default Row\n","import React, { useEffect, useState } from \"react\";\nimport { baseUrl } from \"../API/constants\";\nimport requests from \"../API/requests\";\nimport \"./App.css\";\nimport Banner from \"./Banner\";\nimport Nav from \"./Nav\";\nimport Row from \"./Row\";\n\nconst App = () => {\n  const [personalizeUrl, setPersonalizeUrl] = useState(baseUrl + \"/all\");\n  const [myRating, setMyRating] = useState([]);\n\n  const addRating = (rating) => {\n    console.log(\"before;;\", myRating);\n    myRating.push(rating);\n    setMyRating(myRating);\n    const user_based_param = myRating.join(\"&params=\");\n    const url = `${baseUrl}/user-based/?params=${user_based_param}`;\n    setPersonalizeUrl(url);\n  };\n\n  useEffect(() => {\n    if (myRating.length > 0) {\n      const user_based_param = myRating.join(\"&params=\");\n      const url = `${baseUrl}/user-based/?params=${user_based_param}`;\n      setPersonalizeUrl(url);\n    }\n    console.log(personalizeUrl);\n  });\n\n  return (\n    <div className=\"app\">\n      {/**NAV */}\n      <Nav />\n      {/*BANNER*/}\n      <Banner />\n\n      <Row\n        title=\"Recommend For You\"\n        id=\"RF\"\n        fetchUrl={personalizeUrl}\n        addRating={addRating}\n        key={personalizeUrl}\n      />\n\n      <Row\n        title=\"DQ's Pick\"\n        id=\"DP\"\n        fetchUrl={requests.fetchDQsPick}\n        addRating={addRating}\n      />\n      <Row\n        title=\"Action Movies\"\n        id=\"AM\"\n        fetchUrl={requests.fetchActionMovies}\n        addRating={addRating}\n      />\n      <Row\n        title=\"Comedy Movies\"\n        id=\"CM\"\n        fetchUrl={requests.fetchComedyMovies}\n        addRating={addRating}\n      />\n      <Row\n        title=\"Horror Movies\"\n        id=\"HM\"\n        fetchUrl={requests.fetchHorrorMovies}\n        addRating={addRating}\n      />\n      <Row\n        title=\"Romance  Movies\"\n        id=\"RM\"\n        fetchUrl={requests.fetchRomanceMovies}\n        addRating={addRating}\n      />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App.js';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
{"version":3,"sources":["API/axios.js","components/MovieModal/index.js","components/Row.js","API/requests.js","components/Banner.js","components/Nav.js","components/App.js","serviceWorker.js","index.js"],"names":["instance","axios","create","baseURL","MovieModal","poster_path","movieId","title","genres","url","rating_avg","rating_count","setModalVisibility","addRating","className","role","onClick","src","alt","replaceAll","toFixed","window","open","count","onChange","rating","rating_with_id","console","log","size","color2","id","fetchUrl","Row","useState","movies","setMovies","modalVisibility","movieSelected","setMovieSelection","useEffect","a","get","headers","request","data","result","fetchData","document","getElementById","scrollLeft","innerWidth","map","movie","idx","handleClick","loading","requests","fetchDQsPick","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","Banner","str","n","setMovie","Math","floor","random","length","style","backgroundImage","backgroundPosition","backgroundSize","name","original_name","overview","substr","Nav","show","handleShow","addEventListener","scrollY","removeEventListener","App","personalizeUrl","setPersonalizeUrl","myRating","setMyRating","push","user_based_param","join","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.8e79498d.chunk.js","sourcesContent":["import axios from \"axios\";\n\n//THIS IS THE BASE OF THE URL\nconst instance = axios.create({\n    // baseURL : \"https://api.themoviedb.org/3\"\n    baseURL : \"http://api.dqflex.kro.kr:8080\",\n});\n\nexport default instance;","import React from 'react';\nimport './MovieModal.css';\nimport CancelIcon from '@material-ui/icons/Cancel';\nimport Row from '../Row';\nimport PlayArrowIcon from '@material-ui/icons/PlayArrow';\nimport ReactStars from 'react-stars';\n\nconst MovieModal = ({poster_path,movieId,title,genres,url,rating_avg,rating_count,setModalVisibility, addRating}) => {\n\n    const onRating = (rating) => {\n        const rating_with_id = `${movieId}:${rating}`;\n        console.log(rating_with_id);    \n        addRating(rating_with_id);\n        setModalVisibility(false);\n    }\n\n    return (\n        <div className=\"presentation\" role=\"presentation\">\n            <div className=\"wrapper-modal\">\n                <div className=\"modal\">\n                    <span onClick={()=>setModalVisibility(false)}className=\"modal-close\"><CancelIcon/></span>\n                    <div className=\"modal__header\">\n                        <img\n                            className=\"modal__poster-img\"\n                            src={`${poster_path}`}\n                            alt={`${title}`}\n                        />\n                        <div className=\"modal__content\">\n                            <p className=\"modal__details\"><span className=\"modal__user-perc\">Genre: </span> {genres.replaceAll('|', ' | ')}</p>\n                            <h3 className=\"modal__title\">{title}</h3>\n                            <p className=\"modal__overview\">Vote Average: {rating_avg.toFixed(2)}</p>\n                            <p className=\"modal__overview\">Vote Count: {rating_count}</p>\n                            <div className=\"modal__header\">\n                                <button className=\"banner__button play\" onClick={() => {window.open(url)}}><PlayArrowIcon />Detail</button>\n                                <ReactStars\n                                    count={5}\n                                    onChange={onRating}\n                                    size={24}\n                                    color2={'#ffd700'} />\n                            </div>\n                        </div>\n                    </div>\n                    <Row\n                        title=\"You may also like...\"\n                        id={movieId}\n                        fetchUrl={`http://api.dqflex.kro.kr:8080/item-based/${movieId}`}\n                    />\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default MovieModal\n","import React, {useState,useEffect} from 'react'\nimport axios from \"../API/axios\";\nimport \"./Row.css\";\nimport MovieModal from './MovieModal';\nimport ArrowForwardIosIcon from '@material-ui/icons/ArrowForwardIos';\nimport ArrowBackIosIcon from '@material-ui/icons/ArrowBackIos';\n\nconst Row= ({title,fetchUrl,id, addRating})=> {\n    const base_url = \"https://image.tmdb.org/t/p/original/\";\n    const [movies, setMovies] = useState([])\n    const [modalVisibility,setModalVisibility] = useState(false);\n    const [movieSelected, setMovieSelection] = useState({});\n\n    //A snippet of code which runs based on a specific condition/variable\n    useEffect(()=>{\n        console.log(id, fetchUrl)\n        //if [], run once when the row loads, and dont run again \n\n        async function fetchData(){\n            //Dont move until we get the API answer\n            const request = await axios.get(fetchUrl, {\n                headers: {\n                  'Access-Control-Allow-Origin': '*',\n                }\n            });\n            // GET REQUEST  = \"https://api.themoviedb.org/3/fetchUrl\"\n            setMovies(request.data.result)\n            return request;\n        }\n\n        fetchData();\n\n    }, [fetchUrl]);\n\n    const handleClick = (movie) =>{\n        setModalVisibility(true);\n        setMovieSelection(movie);\n    }\n    return (\n        <section className=\"row\">\n            {/** TITLE */}\n            <h2>{title}</h2>\n            <div className=\"slider\">\n     \n                <div className=\"slider__arrow-left\" ><span className=\"arrow\" onClick={()=>{document.getElementById(id).scrollLeft-=(window.innerWidth-80)}}><ArrowBackIosIcon/></span></div>\n                <div id={id} className=\"row__posters\">\n                    {/**SEVERAL ROW__POSTER */}\n                    {movies.map((movie, idx)=>(\n                        <img\n                            key={idx}\n                            onClick={() => handleClick(movie)}\n                            className={`row__poster row__posterLarge`} \n                            src={`${base_url}${movie.poster_path}`} \n                            loading=\"lazy\"\n                            alt={movie.title}/>\n                    ))}\n                    \n                </div>\n                <div className=\"slider__arrow-right\" ><span className=\"arrow\" onClick={()=>{document.getElementById(id).scrollLeft+=(window.innerWidth-80)}}><ArrowForwardIosIcon/></span></div>\n            </div>\n            {modalVisibility && <MovieModal {...movieSelected} setModalVisibility={setModalVisibility} addRating={addRating} />}\n        </section>\n    )\n}\n\nexport default Row\n","// const API_KEY = \"896c8566fc255f7c52f6ea6bd2901188\";\n\nconst requests = {\n    fetchDQsPick: `/all`,\n    fetchActionMovies: `/genres/action`,\n    fetchComedyMovies: `/genres/comedy`,\n    fetchHorrorMovies: `/genres/horror`,\n    fetchRomanceMovies: `/genres/romance`,\n}\n\nexport default requests;","import React,{useState,useEffect} from 'react';\nimport PlayArrowIcon from '@material-ui/icons/PlayArrow';\nimport InfoOutlinedIcon from '@material-ui/icons/InfoOutlined';\nimport axios from \"../API/axios\";\nimport requests from \"../API/requests\";\nimport \"./Banner.css\";\n\nconst Banner= ()=> {\n    const [movie,setMovie] = useState([]);\n\n    const truncate = (str, n)=> {\n        return str?.length > n ? str.substr(0, n - 1) + \"...\" : str;\n    }\n\n    useEffect(() => {\n        async function fetchData(){\n            const request = await axios.get(requests.fetchDQsPick, {\n                headers: {\n                  'Access-Control-Allow-Origin': '*',\n                }\n            });\n            //Give to our movie hook one of all the movies randomly\n            setMovie(request.data.result[\n                Math.floor(Math.random() * request.data.result.length -1)\n            ]);\n            return request;\n        }\n        fetchData();\n        \n    },[]);\n    \n    return (\n        <header className=\"banner\"\n            style={{\n                backgroundImage : `url(\n                    \"https://image.tmdb.org/t/p/original/${movie?.poster_path}\"\n                    )`,\n                backgroundPosition : \"top center\",\n                backgroundSize: \"cover\",\n            }}\n        >\n            <div className=\"banner__contents\">\n                {/**Tittle */}\n                <h1 className=\"banner__title\">{movie?.title || movie?.name || movie?.original_name}</h1>\n                <div className=\"banner__buttons\">\n                    <button className=\"banner__button play\"><PlayArrowIcon />Play</button>\n                    {/* <button className=\"banner__button info\"><InfoOutlinedIcon fontSize=\"small\"  paddingRight={20} marginRight={100}/><div className=\"space\"></div> More Information</button> */}\n                    \n                </div>\n                {/**DIV > 2 BUTTONS */}\n\n                <h1 className=\"banner__description\">{truncate(movie?.overview, 150)}</h1>\n                {/*Description*/}\n            </div>   \n            <div className=\"banner--fadeBottom\"/>\n        </header>\n    )\n}\n\nexport default Banner\n","import React,{useState,useEffect} from 'react';\nimport \"./Nav.css\";\n\nconst Nav= ()=> {\n    const [show, handleShow] = useState(false);\n\n    useEffect(()=>{\n        window.addEventListener(\"scroll\", () =>{\n            if(window.scrollY > 50){\n                handleShow(true);\n            }else{\n                handleShow(false);\n            }\n            \n        });\n        return () => {\n            window.removeEventListener(\"scroll\",()=>{})\n        }\n    }, [])\n    \n    return (\n        <nav className={`nav ${show && \"nav__black\"}`}>\n            <img\n                alt=\"DQflex logo\"\n                src=\"https://i.ibb.co/svtr2tD/dqflex-logo.png\"\n                className=\"nav__logo\"\n            />\n            <img\n                alt=\"User logged\"\n                src=\"https://pbs.twimg.com/profile_images/1240119990411550720/hBEe3tdn_400x400.png\"\n                className=\"nav__avatar\"\n            />\n        </nav>\n    )\n}\n\nexport default Nav\n","import React, { useEffect, useState } from 'react';\nimport Row from \"./Row\";\nimport Banner from \"./Banner\";\nimport Nav from \"./Nav\";\nimport requests from \"../API/requests\";\nimport './App.css';\n\nconst App=()=> {\n\n  const [personalizeUrl, setPersonalizeUrl] = useState(\"http://api.dqflex.kro.kr:8080/all\");\n  const [myRating, setMyRating] = useState([]);\n\n  const addRating = (rating) => {\n    console.log('before;;', myRating);\n    myRating.push(rating);\n    setMyRating(myRating);\n    const user_based_param = myRating.join(\"&params=\");\n    const url = `http://api.dqflex.kro.kr:8080/user-based/?params=${user_based_param}`;\n    setPersonalizeUrl(url);\n  }\n\n  useEffect(() => {\n\n      if (myRating.length > 0) {\n          const user_based_param = myRating.join(\"&params=\");\n          const url = `http://api.dqflex.kro.kr:8080/user-based/?params=${user_based_param}`;\n          setPersonalizeUrl(url);\n      }\n      console.log(personalizeUrl);\n  });\n\n  return (\n    <div className=\"app\">\n      {/**NAV */}\n      <Nav/>\n      {/*BANNER*/}\n      <Banner />\n\n      <Row\n        title=\"Recommend For You\"\n        id=\"RF\"\n        fetchUrl={personalizeUrl}\n        addRating={addRating}\n        key={personalizeUrl}\n      />\n\n      <Row\n        title=\"DQ's Pick\"\n        id=\"DP\"\n        fetchUrl={requests.fetchDQsPick}\n        addRating={addRating}\n      />\n      <Row\n        title=\"Action Movies\"\n        id=\"AM\"\n        fetchUrl={requests.fetchActionMovies}\n        addRating={addRating}\n      />\n      <Row\n        title=\"Comedy Movies\"\n        id=\"CM\"\n        fetchUrl={requests.fetchComedyMovies}\n        addRating={addRating}\n      />\n      <Row\n        title=\"Horror Movies\"\n        id=\"HM\"\n        fetchUrl={requests.fetchHorrorMovies}\n        addRating={addRating}\n      />\n      <Row\n        title=\"Romance  Movies\"\n        id=\"RM\"\n        fetchUrl={requests.fetchRomanceMovies}\n        addRating={addRating}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App.js';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}